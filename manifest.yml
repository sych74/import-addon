type: update
jpsVersion: 6.1.1
name: WordPress Migrator
id: wp-migrator
targetEditions: any
logo: /images/migrate-logo.svg
description: Migrate your web site from remote WordPress installation
baseUrl: https://raw.githubusercontent.com/sych74/import-addon/master

targetNodes:
  nodeType:
    - nginxphp
    - litespeedphp
    - lemp
    - llsmp

settings:
  ssh:
    submitUnchanged: true
    fields:
      - type: string
        name: ssh_host
        caption: SSH Host/IP
        default: ''
        required: true
      - type: string
        name: ssh_port
        caption: SSH Port
        default: ''
        required: true
      - type: string
        name: ssh_user
        caption: SSH User
        default: ''
        required: true
      - type: string
        inputType: password
        name: ssh_pass
        caption: SSH Password
        default: ''
        required: true

  deploy:
    fields: []
    onBeforeInit: |
      import org.json.JSONObject;
      var resp = jelastic.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ command: 'cat /home/jelastic/migrator/projects.json' }]), true);
      if ( resp.result != 0 ) return resp;
      var projectList = JSON.parse(resp.responses[0].out);
      var projectListPrepared = prepareProjects(projectList);
      
      function prepareProjects(values) {
        var aResultValues = [];
        values = values || [];
        for (var i = 0, n = values.length; i < n; i++) {
          aResultValues.push({
            caption: values[i].siteUrl,
            value: values[i].id
          });
        }
        return aResultValues;
      }

      settings.fields.push({
        "caption": "Project",
        "type": "list",
        "tooltip": "Select the project which you want to import",          
        "name": "project",
        "required": false,
        "multiSelect": true,
        "values": projectListPrepared
      })

      return settings;

buttons:
- caption: Get remote projects
  action: getRemoteProjects
  settings: ssh
  title: SSH connection detail
  loadingText: Getting remote WordPress projects...
  submitButtonText: Get projects
  successText: List of WordPress projects received successfully.
  
- caption: Import project
  action: deployProject
  loadingText: Importing...
  settings: deploy
  successText: The Wordpress project have been successfully imprted.
  title: Import Project
  submitButtonText: Import project
  confirmText: You are going to import project, which will override all your existing data. This action cannot be canceled or reverted. Do you want to proceed?

globals:
  migration_dir: /home/jelastic/migrator
  wpenv_file: /home/jelastic/migrator/.wpenv
  projects_file: /home/jelastic/migrator/projects.json

responses:    
  701:
    type: warning
    message: SSH connection is failed. Please check SSH connection details!
    
  702:
    type: warning
    message: WP Toolkit utility isnt activated for this account. Please activate!  
    
  99:
    type: warning
    message: |
      Errors were discovered during the project migration.
      Please check the **/var/log/migrator.log** log file on master node of CP layer for details.

onInstall:
  - installDependencies

actions:
  installDependencies:
    - cmd[cp]: |-
        rpm -qa | grep -qw sshpass || yum install sshpass -y;
        echo "WordPress migrator add-on logs" > /var/log/migrator.log;
        chown jelastic /var/log/migrator.log;
      user: root
    - cmd[${nodes.cp.master.id}]: |-
        [[ -d ${globals.migration_dir} ]] || mkdir ${globals.migration_dir};
        wget ${baseUrl}/scripts/migrator.sh -O ${globals.migration_dir}/migrator.sh;

  deployProjectAAAAAAAA:
    script: |
      var projects = '${settings.project}'.split(','), action;
      action = (projects.length > 1 || '${settings.isAllDeploy}' == 'true') ? "deployAllProjects" : "deployOneProject";
      return { result: 0, onAfterReturn: action };

  getRemoteProjects:
    - script: |
        var command = "bash ${globals.migration_dir}/migrator.sh getRemoteProjects --ssh-user=${settings.ssh_user} --ssh-password=${settings.ssh_pass} --ssh-host=${settings.ssh_host} --ssh-port=${settings.ssh_port}";
        resp = api.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ "command": command }]), true);
        if (resp.result != 0) return resp;
        return JSON.parse(resp.responses[0].out).result;

  deployOneProject:
    - script: |
        var command = "bash ${globals.migration_dir}/migrator.sh deployProject --instance-id=${settings.project}";
        resp = api.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ "command": command }]), true);
        if (resp.result != 0) return resp;
        return JSON.parse(resp.responses[0].out).result;
          
  deployProject:
    - script: |
        var envGroups = eval('(' + MANIFEST + ')').envGroups, actions = [], projectList = [];
        var wpenv_file = jelastic.env.file.Read('${env.envName}', session, '${globals.wpenv_file}', null, null, '${nodes.cp.master.id}');
        if (wpenv_file.result != 0) return wpenv_file;

        var projects_file = jelastic.env.file.Read('${env.envName}', session, '${globals.projects_file}', null, null, '${nodes.cp.master.id}');
        if (projects_file.result != 0) return projects_file;
        
        if ('${settings.isAllDeploy}' == 'true') {
          var resp = jelastic.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ command: 'bash $HOME/migrator/migrator.sh getProjectList --format=json' }]), true);
          if (resp.result != 0) return resp;
          try {
            projectList = JSON.parse(resp.responses[0].out).projects || [];
          } catch (ex) {
            return { type: "error", message: "cannot parse project list: " + ex }
          }
        } else {
          projectList = '${settings.project}'.split(',');
        }
    
        for (var i = 0, n = projectList.length; i < n; i ++) {
          actions.push({
            jps: "${baseUrl}/scripts/createEnvironment.jps?_r=${fn.random}",
            envGroups: envGroups,
            settings: {
              "master_env": '${env.envName}',
              "wpenv_file": wpenv_file,
              "projects_file": projects_file,
              "project_id": projectList[i],
              "envGroups": envGroups
            }
          });
        }
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };
