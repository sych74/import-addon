type: update
jpsVersion: 6.1.1
name: WordPress Migrator
id: wp-migrator
targetEditions: any
logo: /images/migrate-logo.svg
description: Migrate your web site from remote WordPress installation
baseUrl: https://raw.githubusercontent.com/sych74/import-addon/master

targetNodes:
  nodeType:
    - nginxphp
    - litespeedphp
    - lemp
    - llsmp

settings:
  ssh:
    fields:
      - type: string
        name: ssh_host
        caption: SSH Host/IP
        default: ''
        required: true
      - type: string
        name: ssh_port
        caption: SSH Port
        default: ''
        required: true
      - type: string
        name: ssh_user
        caption: SSH User
        default: ''
        required: true
      - type: string
        inputType: password
        name: ssh_pass
        caption: SSH Password
        default: ''
        required: true

  deploy:
    fields: []
    onBeforeInit: scripts/importOnBeforeInit.js?_r=${fn.random}
      
buttons:
- caption: Get projects
  action: getSSHprojects
  settings: ssh
  title: SSH connection detail
  logsPath: /var/log/migrator.log
  loadingText: Getting WordPress projects...
  submitButtonText: Get projects
  successText: List of WordPress projects received successfully.
  
- caption: Migrate
  action: deployProject
  loadingText: Migrating...
  settings: deploy
  successText: The Wordpress project have been successfully migrated.
  title: Migrate Project
  logsPath: /var/log/migrator.log
  submitButtonText: Migrate project
  confirmText: You are going to migrate project, which will override all your existing data. This action cannot be canceled or reverted. Do you want to proceed?

globals:
  migration_dir: "$HOME/migrator"

responses:    
  701:
    type: warning
    message: SSH connection is failed. Please check SSH connection details!
    
  99:
    type: warning
    message: |
      Errors were discovered during the project migration.
      Please check the **/var/log/migrator.log** log file for details.

onInstall:
  - installDependencies

actions:
  installDependencies:
    - cmd[cp]: |-
        rpm -qa | grep -qw sshpass || yum install sshpass -y;
        echo "WordPress migrator add-on logs" > /var/log/migrator.log;
        chown jelastic /var/log/migrator.log;
      user: root
    - cmd[${nodes.cp.master.id}]: |-
        [[ -d ${globals.migration_dir} ]] || mkdir ${globals.migration_dir};
        wget ${baseUrl}/scripts/migrator.sh -O ${globals.migration_dir}/migrator.sh;

  deployProject:
    - if (${settings.isAllDeploy}): deployAllProjects
    - else: deployOneProject

  getSSHprojects:
    - installDependencies:
    - setGlobals:
        ssh_user: "${settings.ssh_user}"
        ssh_pass: "${settings.ssh_pass}"
        ssh_host: "${settings.ssh_host}"
        ssh_port: "${settings.ssh_port}"

    - env.control.ApplyNodeGroupData [cp]:
        data: 
          globals: "${globals.toJSON()}"

    - script: |
        var command = "bash ${globals.migration_dir}/migrator.sh getSSHprojects --ssh-user=${globals.ssh_user} --ssh-password=${globals.ssh_pass} --ssh-host=${globals.ssh_host} --ssh-port=${globals.ssh_port}";
        resp = api.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ "command": command }]), true);
        if (resp.result != 0) return resp;
        return JSON.parse(resp.responses[0].out).result;

  deployOneProject:
    - script: |
        var command = "bash ${globals.migration_dir}/migrator.sh deployProject --project-name=${settings.project}";
        resp = api.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ "command": command }]), true);
        if (resp.result != 0) return resp;
        return JSON.parse(resp.responses[0].out).result;
          
  deployAllProjects:
    - importGlobalsFromNodeGroup: cp
    - script: |
        var envGroups = eval('(' + MANIFEST + ')').envGroups, actions = [];
        var resp = jelastic.env.control.ExecCmdById('${env.envName}', session, '${nodes.cp.master.id}', toJSON([{ command: 'bash $HOME/migrator/migrator.sh getProjectList' }]), true);
        if (resp.result != 0) return resp;
        try {
          var projectList = JSON.parse(resp.responses[0].out).projects || [];
        } catch (ex) {
          return { type: "error", message: "cannot parse project list: " + ex }
        }
        for (var i = 0, n = projectList.length; i < n; i ++) {
          actions.push({
            jps: "${baseUrl}/scripts/createEnvironment.jps?_r=${fn.random}",
            envGroups: envGroups,
            settings: {
              "ssh_user": "${globals.ssh_user}",
              "ssh_pass": "${globals.ssh_pass}",
              "ssh_host": "${globals.ssh_host}",
              "ssh_port": "${globals.ssh_port}",
              "project_name": projectList[i],
              "envGroups": envGroups
            }
          });
        }
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

  importGlobalsFromNodeGroup:
    - script: |
        var resp = api.env.control.GetNodeGroups("${env.name}", session);
        if (resp.result != 0) return resp;
        var groups = resp.object, globals;
        for (var i = 0, n = groups.length; i < n; i++)
          if (groups[i].name == "${this}" && groups[i].globals) {
            globals = new org.yaml.snakeyaml.Yaml().load(groups[i].globals);
            break;
          }
        return { result: 0, onAfterReturn: { setGlobals: globals } };
